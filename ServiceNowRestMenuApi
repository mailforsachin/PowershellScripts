function Show-Menu
{
     param (
           [string]$Title = 'ICSDemo- ServiceNow Utility'
     )
     cls
     Write-Host " ================ $Title ================ " -ForegroundColor Cyan
     
     Write-Host "1: Press '1' for creating an incident in ServiceNow"
     Write-Host "2: Press '2' for displaying incident(s)."
     Write-Host "3: Press '3' for updating a particular incident in ServiceNow"
     Write-Host "4: Press '4' for deleting incident(s)."
     Write-Host "5: Press '5' for deleting a particular user from ServiceNow " -ForegroundColor White -NoNewline; 
     Write-Host " (Requires admin password)" -ForegroundColor Red;
     Write-Host "Q: Press 'Q' to Quit."
}

do
{
     Show-Menu
     $input = Read-Host "Please make a selection(1,2,3,4,5,Q)"
     switch ($input)
     {
           '1' {
                    # CREATING INCIDENT
                    # Get userinformation from the user.
                    cls
                    $user = "test2.user"
                    $pass = ""
                    # Build auth header
                    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                    $defaultValue = 'sachin.tewari@somecompanydsicsdemo.net'
                    $username = Read-Host "Press enter a username OR Press enter to accept the default [$($defaultValue)]"
                    $username = ($defaultValue,$username)[[bool]$username]

                    #$username=Read-Host -Prompt "Enter the username"
                    #$username='sachin.tewari@somecompanydsicsdemo.net'

                    Function Get-SysID
                    {
                        Param($username,$base64AuthInfo)

                        try
                        {

                            # Eg. User name="admin", Password="admin" for this code sample.
    

                            # Build auth header
                            #$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                            # Set proper headers
                            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                            $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                            $headers.Add('Accept','application/json')


                            # Specify endpoint uri
                            $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user?sysparm_query=user_name%3D$username&sysparm_fields=sys_id&sysparm_limit=1"

                            # Specify HTTP method
                            $method = "get"

                                # Send HTTP request
                            $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Contesomecompanyype "application/json"
                            $sys_id=$response.result.sys_id

                            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                            $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                            $headers.Add('Accept','application/json')
                            $headers.Add('Content-Type','application/json')

                            # Specify endpoint uri
                            $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident"

                            # Specify HTTP method
                                $method = "Post"

                            $body = @{
                                        company = "d"
                                        caller_id = $sys_id
                                        location= "d"
                                        short_description="ICSDemo-Incident generated using REST API"
                                        u_requested_by= $sys_id
                                        opened_by="d"
                                        category="access"
                                        description="This incident was generated by Powershell using REST API.Can be resolved or deleted."
                                        cmdb_ci="d"
                                     }
    
                            $bodyJson = $body | ConvertTo-Json

                            # Send HTTP request
                            $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Body $Bodyjson -Contesomecompanyype "application/json" -UseBasicParsing
                                    #}
                            Write-host "The incident number created is  $($response.result.number)"
   
                        }
        
                        Catch 
                        {
                                Write-Host "Error running the script. A probable cause is the user is not found. Please investigate"
                                Write-Host $_.Exception.ToString()
                                $error[0] | Format-List -Force
                        }
                    }    
                    Get-SysID $username $base64AuthInfo



           } '2' {
                    cls
                    $user = "test2.user"
                    $pass = ""
                    # Build auth header
                    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                    $defaultValue = 'sachin.tewari@somecompanydsicsdemo.net'
                    $username = Read-Host "Press enter a username OR Press enter to accept the default [$($defaultValue)]"
                    $username = ($defaultValue,$username)[[bool]$username]
                    #$username='sachin.tewari@somecompanydsicsdemo.net'

                    Function Get-SysID
                        {
                            Param($username,$base64AuthInfo)

                                try
                                {

                                    # Eg. User name="admin", Password="admin" for this code sample.
    

                                    # Build auth header
                                    #$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                                    # Set proper headers
                                    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                                    $headers.Add('Accept','application/json')


                                    # Specify endpoint uri
                                    $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user?sysparm_query=user_name%3D$username&sysparm_fields=sys_id&sysparm_limit=1"

                                    # Specify HTTP method
                                    $method = "get"

                                        # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Contesomecompanyype "application/json"
                                    $sys_id=$response.result.sys_id
                                    #write-host $sys_id
                                    #return $sys_id

                                    $user = "d.user"
                                    $pass = "d"
                                    # Build auth header
                                    $HeaderAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))
                                    $SNOWSessionHeader = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $SNOWSessionHeader.Add('Authorization',('Basic {0}' -f $HeaderAuth))
                                    $SNOWSessionHeader.Add('Accept','application/json')
                                    $Type = "application/json"
                                    $SNOWURL = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident?sysparm_query=caller_id%3D$sys_id"

                                    #write-host $SNOWURL
                                    #exit
                                    $IncidentListJSON = Invoke-RestMethod -Method GET -Uri $SNOWURL -Headers $SNOWSessionHeader -Contesomecompanyype $Type
                                    $IncidentList = $IncidentListJSON.result
                                    $sys_id=$IncidentList.sys_id
                                    $IncidentList |Select number,short_description,opened_at,sys_created_by,impact,priority | Sort-Object opened_at -Descending| Format-Table
                               }
                               Catch 
                               {
                                    Write-Host $_.Exception.ToString()
                                    $error[0] | Format-List -Force
                                    Write-Host "Error running the script."
                               }
                        }

                       
                    Get-SysID $username $base64AuthInfo
                   


           } '3' {
                    cls
                    $user = "test2.user"
                    $pass = ""
                    # Build auth header
                    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                    #$default="sachin.tewari@somecompanydsicsdemo.net"
                    $defaultValue = 'sachin.tewari@somecompanydsicsdemo.net'
                    $username = Read-Host "Press enter a username OR Press enter to accept the default [$($defaultValue)]"
                    $username = ($defaultValue,$username)[[bool]$username]
                    
                    #$username='sachin.tewari@somecompanydsicsdemo.net'

                    #write-host $username

                    Function Get-SysID
                        {
                            Param($username,$base64AuthInfo)

                                try
                                {

                                    # Eg. User name="admin", Password="admin" for this code sample.
    

                                    # Build auth header
                                    #$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                                    # Set proper headers
                                    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                                    $headers.Add('Accept','application/json')


                                    # Specify endpoint uri
                                    $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user?sysparm_query=user_name%3D$username&sysparm_fields=sys_id&sysparm_limit=1"

                                    # Specify HTTP method
                                    $method = "get"

                                        # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Contesomecompanyype "application/json"
                                    $sys_id=$response.result.sys_id
                                    #write-host $sys_id
                                    #return $sys_id

                                    $user = "test2.user"
                                    $pass = ""
                                    # Build auth header
                                    $HeaderAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))
                                    $SNOWSessionHeader = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $SNOWSessionHeader.Add('Authorization',('Basic {0}' -f $HeaderAuth))
                                    $SNOWSessionHeader.Add('Accept','application/json')
                                    $Type = "application/json"
                                    $SNOWURL = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident?sysparm_query=caller_id%3D$sys_id"

                                    #write-host $SNOWURL
                                    #exit
                                    $IncidentListJSON = Invoke-RestMethod -Method GET -Uri $SNOWURL -Headers $SNOWSessionHeader -Contesomecompanyype $Type
                                    $IncidentList = $IncidentListJSON.result
                                    $SelectIncidentList = $IncidentListJSON.result
                                    $sys_id=$IncidentList.sys_id
                                    $IncidentList |Select number,short_description,opened_at,sys_created_by,impact,priority | Sort-Object opened_at -Descending| Format-Table
                                    $SelectTicket=Read-Host -Prompt "Which ticket do you want to update?"
                                    #$SelectTicket="INC0010889"
                                    $IncidentSysID=$SelectIncidentList|Where-Object {$_.number -eq $SelectTicket} |select sys_id
                                    #write-host  $IncidentSysID.sys_id
                                    $URLToUpdate="https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident/"+$IncidentSysID.sys_id
                                    $method = "patch"
                                    write-host "Changing sys_created_by to Sachin.Tewari"
                                    $body = @{
                                        sys_created_by = "Sachin.Tewari"
                                        }

                                    $bodyJson = $body | ConvertTo-Json

                                    # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $URLToUpdate -Body $Bodyjson -Contesomecompanyype "application/json" -UseBasicParsing
                                    #}
                                    Write-host "The sys_created_by userfield is now:  $($response.result.sys_created_by)"
                                    Write-Host "Update operation is now complete"


                               }
                               Catch 
                               {
                                    Write-Host $_.Exception.ToString()
                                    $error[0] | Format-List -Force
                                    Write-Host "Error running the script."
                               }
                        }

                       
                    Get-SysID $username $base64AuthInfo
                    


           }
            '4' {
                 cls
                    $user = "test2.user"
                    $pass = ""
                    # Build auth header
                    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                    #$default="sachin.tewari@somecompanydsicsdemo.net"
                    $defaultValue = 'sachin.tewari@somecompanydsicsdemo.net'
                    $username = Read-Host "Press enter a username OR Press enter to accept the default [$($defaultValue)]"
                    $username = ($defaultValue,$username)[[bool]$username]
                    
                    #$username='sachin.tewari@somecompanydsicsdemo.net'

                    #write-host $username

                    Function Get-SysID
                        {
                            Param($username,$base64AuthInfo)

                                try
                                {

                                    # Eg. User name="admin", Password="admin" for this code sample.
    

                                    # Build auth header
                                    #$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                                    # Set proper headers
                                    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                                    $headers.Add('Accept','application/json')


                                    # Specify endpoint uri
                                    $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user?sysparm_query=user_name%3D$username&sysparm_fields=sys_id&sysparm_limit=1"

                                    # Specify HTTP method
                                    $method = "get"

                                        # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Contesomecompanyype "application/json"
                                    $sys_id=$response.result.sys_id
                                    #write-host $sys_id
                                    #return $sys_id

                                    $user = "test2.user"
                                    $pass = ""
                                    # Build auth header
                                    $HeaderAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))
                                    $SNOWSessionHeader = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $SNOWSessionHeader.Add('Authorization',('Basic {0}' -f $HeaderAuth))
                                    $SNOWSessionHeader.Add('Accept','application/json')
                                    $Type = "application/json"
                                    $SNOWURL = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident?sysparm_query=caller_id%3D$sys_id"

                                    #write-host $SNOWURL
                                    #exit
                                    $IncidentListJSON = Invoke-RestMethod -Method GET -Uri $SNOWURL -Headers $SNOWSessionHeader -Contesomecompanyype $Type
                                    $IncidentList = $IncidentListJSON.result
                                    $SelectIncidentList = $IncidentListJSON.result
                                    $sys_id=$IncidentList.sys_id
                                    $IncidentList |Select number,short_description,opened_at,sys_created_by,impact,priority | Sort-Object opened_at -Descending| Format-Table
                                    $SelectTicket=Read-Host -Prompt "Which ticket do you want to delete?"
                                    #$SelectTicket="INC0010889"
                                    $IncidentSysID=$SelectIncidentList|Where-Object {$_.number -eq $SelectTicket} |select sys_id
                                    #write-host  $IncidentSysID.sys_id
                                    $URLToUpdate="https://somecompanydataxyzdemo02.service-now.com/api/now/table/incident/"+$IncidentSysID.sys_id
                                    $method = "delete"
                                    write-host "Deleting incident record $SelectTicket"
                                    # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $URLToUpdate -Body $Bodyjson -Contesomecompanyype "application/json" -UseBasicParsing
                                    #}
                                    #Write-host "The sys_created_by userfield is now:  $($response.result.sys_created_by)"
                                    Write-Host "Delete operation is now complete"
                                    $IncidentListJSON = Invoke-RestMethod -Method GET -Uri $SNOWURL -Headers $SNOWSessionHeader -Contesomecompanyype $Type
                                    $IncidentList = $IncidentListJSON.result
                                    $sys_id=$IncidentList.sys_id
                                    $IncidentList |Select number,short_description,opened_at,sys_created_by,impact,priority | Sort-Object opened_at -Descending| Format-Table


                               }
                               Catch 
                               {
                                    Write-Host $_.Exception.ToString()
                                    $error[0] | Format-List -Force
                                    Write-Host "Error running the script."
                               }
                        }

                       
                    Get-SysID $username $base64AuthInfo
           }   
           
            '5' {
                    cls
                    $user = "test2.user"
                    $pass = ""
                    # Build auth header
                    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                    #$default="sachin.tewari@somecompanydsicsdemo.net"
                    #$defaultValue = 'sachin.tewari@somecompanydsicsdemo.net'
                    $username = Read-Host "Press enter a username(e.g. Johnny.Blaze)"
                    #$username = ($defaultValue,$username)[[bool]$username]

                    $useradmin = Read-Host "Enter the admin password to delete user record"

                    if($useradmin -ne "Mu13pul")

                    {
                        
                        Write-Host "Admin password is incorrect!!" -ForegroundColor Red;
                        Write-host "Cannot delete the user because this could lead to instability in the Demo infrastructure."
                        Write-Host "Contact" -NoNewline;
                        Write-Host " Bogdan Udrea" -ForegroundColor Cyan -NoNewLine;
                        Write-Host " OR " -NoNewLine;
                        Write-Host "Sachin Tewari " -ForegroundColor Cyan -NoNewLine;
                        Write-Host "for the admin password."
                        break

                    }
                    
                    #$username='sachin.tewari@somecompanydsicsdemo.net'

                    #write-host $username

                    Function Get-SysID
                        {
                            Param($username,$base64AuthInfo)

                                try
                                {

                                    # Eg. User name="admin", Password="admin" for this code sample.
    

                                    # Build auth header
                                    #$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))

                                    # Set proper headers
                                    $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                                    $headers.Add('Accept','application/json')


                                    # Specify endpoint uri
                                    $uri = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user?sysparm_query=user_name%3D$username&sysparm_fields=sys_id&sysparm_limit=1"

                                    # Specify HTTP method
                                    $method = "get"

                                        # Send HTTP request
                                    $response = Invoke-RestMethod  -Headers $headers -Method $method -Uri $uri -Contesomecompanyype "application/json"
                                    $sys_id=$response.result.sys_id
                                    #write-host $sys_id
                                    #return $sys_id

                                    $user = "test2.user"
                                    $pass = ""
                                    # Build auth header
                                    $HeaderAuth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $user, $pass)))
                                    $SNOWSessionHeader = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                                    $SNOWSessionHeader.Add('Authorization',('Basic {0}' -f $HeaderAuth))
                                    $SNOWSessionHeader.Add('Accept','application/json')
                                    $Type = "application/json"
                                    $SNOWURL = "https://somecompanydataxyzdemo02.service-now.com/api/now/table/sys_user/$sys_id"

                                    #write-host $SNOWURL
                                    #exit
                                    $IncidentListJSON = Invoke-WebRequest -Method delete -Uri $SNOWURL -Headers $SNOWSessionHeader -Contesomecompanyype $Type
                                    write-host "Deleting user record $username"

                                    if($IncidentListJSON.StatusCode -eq 204)
                                    {
                                        write-host "User $username has been successfully deleted from ServiceNow"
                                    }
                                    

                               }
                               Catch 
                               {
                                    Write-Host $_.Exception.ToString()
                                    $error[0] | Format-List -Force
                                    Write-Host "Error running the script."
                               }
                        }

                       
                    Get-SysID $username $base64AuthInfo
           }        
           
            'q' {
                return
           }
     }
     pause
}
until ($input -eq 'q')



